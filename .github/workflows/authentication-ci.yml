name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: huyenthai01/authentication-service
  PROJECT_PATH: src/Authentication\ Service/Authentication\ Service.csproj
  TEST_PATH: tests/AuthenticationService.IntegrationTests/AuthenticationService.IntegrationTests.csproj
  TAG_NAME: latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: dotnet restore
      - run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Clone Env-Dev repo with docker-compose
        run: git clone https://github.com/huyenthai/Env-Dev.git env-dev

      - name: Create .env file
        working-directory: env-dev
        run: |
          cat <<EOF > .env
          Jwt__Key=${{ secrets.JWT_KEY }}
          ConnectionStrings__AuthDb=Server=auth-db;Database=${{ secrets.AUTH_DB_NAME }};User Id=${{ secrets.DB_USER }};Password=${{ secrets.DB_PASSWORD }};Encrypt=False;TrustServerCertificate=True;
          ConnectionStrings__UserDb=Server=user-db;Database=${{ secrets.USER_DB_NAME }};User Id=${{ secrets.DB_USER }};Password=${{ secrets.DB_PASSWORD }};Encrypt=False;TrustServerCertificate=True;
          RabbitMq__User=${{ secrets.RABBITMQ_USER }}
          RabbitMq__Password=${{ secrets.RABBITMQ_PASSWORD }}
          EOF

      - name: Start services
        working-directory: env-dev
        run: docker-compose up -d --build

      - name: Wait for services to be ready
        run: sleep 30

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Run Integration Tests
        run: dotnet test "${{ env.TEST_PATH }}" --configuration Release --logger "trx" --results-directory TestResults

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Run Tests with Coverage
        run: |
          dotnet test ${{ env.TEST_PATH }} --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Cobertura Report
        run: |
          mkdir -p coverage
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage" \
            -reporttypes:"Cobertura;HtmlInline_AzurePipelines"

      - name: Rename report for Codacy
        run: mv coverage/Cobertura.xml coverage/cobertura.xml

      - name: Upload to Codacy
        shell: bash
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          curl -Ls https://coverage.codacy.com/get.sh | bash
          /home/runner/.cache/codacy/coverage-reporter/14.1.0/codacy-coverage-reporter \
            report \
            --project-token $CODACY_PROJECT_TOKEN \
            --commit-uuid ${{ github.sha }} \
            --language CSharp \
            -r coverage/cobertura.xml

  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build & Push Docker image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          docker build -t "${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA" -t "${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}" .
          docker push "${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          docker push "${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
