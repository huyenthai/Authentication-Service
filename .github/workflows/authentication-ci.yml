name: CI/CD Pipeline - Authentication Service

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: huyenthai01/authentication-service
  PROJECT_PATH: src/Authentication Service/Authentication Service.csproj
  TEST_PATH: tests/AuthenticationService.IntegrationTests/AuthenticationService.IntegrationTests.csproj
  TAG_NAME: latest

permissions:
  security-events: write

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: dotnet restore
      - run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Run Integration Tests
        run: |
          dotnet test "${{ env.TEST_PATH }}" --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults

  code-coverage:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
      - name: Generate Cobertura Report
        run: |
          mkdir -p coverage
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage" \
            -reporttypes:"Cobertura"
      - name: Rename for Codacy
        run: mv coverage/Cobertura.xml coverage/cobertura.xml
      - name: Upload to Codacy
        shell: bash
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          curl -Ls https://coverage.codacy.com/get.sh | bash
          /home/runner/.cache/codacy/coverage-reporter/*/codacy-coverage-reporter \
            report \
            --project-token $CODACY_PROJECT_TOKEN \
            --commit-uuid ${{ github.sha }} \
            --language CSharp \
            -r coverage/cobertura.xml

  docker-image-and-push:
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker Image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE="${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          LATEST="${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
          docker build -t "$IMAGE" -t "$LATEST" .
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      - name: Push Docker Image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          docker push "${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          docker push "${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
