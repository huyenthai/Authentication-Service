name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: huyenthai01/authentication-service
  PROJECT_PATH: src/AuthenticationService/AuthenticationService.csproj
  TEST_PATH: tests/AuthenticationService.IntegrationTests/AuthenticationService.IntegrationTests.csproj
  TAG_NAME: latest


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: dotnet restore
      - run: dotnet build "${{ env.PROJECT_PATH }}" --configuration Release

  docker-image-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE="${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          LATEST="${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
          docker build -t "$IMAGE" -t "$LATEST" .
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      - name: Push Docker image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          docker push "${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          docker push "${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"


  integration-test:
    runs-on: ubuntu-latest
    needs: docker-image-and-push
    steps:
      - uses: actions/checkout@v3
      - name: Pull Docker images
        run: |
          docker pull huyenthai01/authentication-service:latest
          docker pull huyenthai01/user-service:latest
          docker pull mcr.microsoft.com/mssql/server:2022-latest
          docker pull rabbitmq:3-management

      - name: Create Docker network
        run: docker network create test-network

      - name: Start RabbitMQ
        run: |
          docker run -d --name rabbitmq --network test-network \
            -e RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_USER }} \
            -e RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_PASSWORD }} \
            -p 5672:5672 -p 15672:15672 \
            rabbitmq:3-management

      - name: Wait for RabbitMQ to be ready
        run: |
          for i in {1..30}; do
            if curl -s -u "${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASSWORD }}" http://localhost:15672/api/health/checks/alarms | grep -q '"status":"ok"'; then
              echo "RabbitMQ is ready!"
              break
            fi
            echo "Waiting for RabbitMQ..."
            sleep 2
          done

      - name: Start auth-db
        run: |
          docker run -d --name auth-db --network test-network \
            -e "SA_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            -e "ACCEPT_EULA=Y" \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: Start user-db
        run: |
          docker run -d --name user-db --network test-network \
            -e "SA_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            -e "ACCEPT_EULA=Y" \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: Start Authentication Service
        run: |
          docker run -d --name auth-service --network test-network \
            -e Jwt__Key=${{ secrets.JWT_KEY }} \
            -e ConnectionStrings__AuthDb="Server=auth-db;Database=${{ secrets.AUTH_DB_NAME }};User Id=sa;Password=${{ secrets.DB_PASSWORD }};Encrypt=False;TrustServerCertificate=True;" \
            -e RabbitMq__Host=rabbitmq \
            -p 5000:8080 \
            huyenthai01/authentication-service:latest

      - name: Start User Service
        run: |
          docker run -d --name user-service --network test-network \
            -e Jwt__Key=${{ secrets.JWT_KEY }} \
            -e ConnectionStrings__UserDb="Server=user-db;Database=${{ secrets.USER_DB_NAME }};User Id=sa;Password=${{ secrets.DB_PASSWORD }};Encrypt=False;TrustServerCertificate=True;" \
            -e RabbitMq__Host=rabbitmq \
            -p 5001:8080 \
            huyenthai01/user-service:latest

      - name: Wait for Authentication Service
        run: |
          for i in {1..10}; do
            if curl -s http://auth-service:8080/health > /dev/null; then
              echo "Auth service is ready"
              break
            fi
            echo "Waiting for auth-service..."
            sleep 5
          done

      - name: Wait for User Service
        run: |
          for i in {1..10}; do
            if curl -s http://user-service:8080/health > /dev/null; then
              echo "User service is ready"
              break
            fi
            echo "Waiting for user-service..."
            sleep 5
          done
      - name: Show logs for auth-service
        run: docker logs auth-service || true

      - name: Show logs for user-service
        run: docker logs user-service || true

      - name: Run Integration Tests
        run: |
          docker run --rm --network test-network \
            -v ${{ github.workspace }}:/app \
            -w /app \
            -e AUTH_SERVICE_URL=http://auth-service:8080 \
            -e USER_SERVICE_URL=http://user-service:8080 \
            mcr.microsoft.com/dotnet/sdk:8.0 \
            dotnet test tests/AuthenticationService.IntegrationTests/AuthenticationService.IntegrationTests.csproj --configuration Release

      - name: Cleanup
        if: always()
        run: |
          docker stop auth-service user-service auth-db user-db rabbitmq
          docker rm auth-service user-service auth-db user-db rabbitmq
          docker network rm test-network

  unit-test:
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.vars.outputs.commit_sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Run Unit Tests with Coverage
        run: |
          dotnet test tests/AuthenticationService.UnitTests/AuthenticationService.UnitTests.csproj \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-results
          path: TestResults/**/coverage.cobertura.xml

      - id: vars
        run: echo "commit_sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  coverage:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v3

      - name: Download coverage artifact
        uses: actions/download-artifact@v3
        with:
          name: code-coverage-results
          path: TestResults

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Cobertura + HTML reports
        run: |
          mkdir -p coverage
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage" \
            -reporttypes:"Cobertura;HtmlInline_AzurePipelines"

      - name: Upload HTML report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: html-coverage-report
          path: coverage/index.html

      - name: Rename report for Codacy
        run: mv coverage/Cobertura.xml coverage/cobertura.xml

      - name: Upload to Codacy
        shell: bash
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          curl -Ls https://coverage.codacy.com/get.sh | bash
          ~/.cache/codacy/coverage-reporter/*/codacy-coverage-reporter \
            report \
            --project-token $CODACY_PROJECT_TOKEN \
            --commit-uuid ${{ needs.unit-test.outputs.commit_sha }} \
            --language CSharp \
            -r coverage/cobertura.xml

  # zap-scan:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Create Docker network
  #       run: docker network create test-net

  #     - name: Start RabbitMQ
  #       run: |
  #         docker run -d --name rabbitmq --network test-net \
  #           -e RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_USER }} \
  #           -e RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_PASSWORD }} \
  #           rabbitmq:3-management

  #     - name: Start auth-db
  #       run: |
  #         docker run -d --name auth-db --network test-net \
  #           -e "SA_PASSWORD=${{ secrets.DB_PASSWORD }}" \
  #           -e "ACCEPT_EULA=Y" \
  #           mcr.microsoft.com/mssql/server:2022-latest

  #     - name: Build auth-service Docker image
  #       run: docker build -t auth-service:latest .

  #     - name: Start auth-service container
  #       run: |
  #         docker run -d \
  #           --network test-net \
  #           --name auth-service \
  #           -e Jwt__Key=${{ secrets.JWT_KEY }} \
  #           -e ConnectionStrings__AuthDb="Server=auth-db;Database=${{ secrets.AUTH_DB_NAME }};User Id=sa;Password=${{ secrets.DB_PASSWORD }};Encrypt=False;TrustServerCertificate=True;" \
  #           -e RabbitMq__Host=rabbitmq \
  #           -p 8080:8080 \
  #           auth-service:latest

  #     - name: Wait for auth-service to be ready
  #       run: |
  #         for i in {1..15}; do
  #           if docker exec auth-service curl -s http://localhost:8080/health > /dev/null; then
  #             echo "Auth service is ready!"
  #             break
  #           fi
  #           echo "Waiting for auth-service... ($i)"
  #           sleep 3
  #         done

  #     - name: Show logs for auth-service
  #       run: docker logs auth-service || true

  #     - name: Confirm DNS resolution
  #       run: |
  #         docker run --rm --network test-net busybox:glibc nslookup auth-service || true

  #     - name: Run ZAP scan
  #       run: |
  #         mkdir -p zap_output
  #         chmod -R 777 zap_output
  #         docker run --rm \
  #           --network test-net \
  #           --user root \
  #           -v ${{ github.workspace }}/zap_output:/zap/wrk \
  #           ghcr.io/zaproxy/zaproxy:stable zap.sh \
  #           -cmd -quickurl http://auth-service:8080 \
  #           -quickout /zap/wrk/zap_report.json \
  #           -quickprogress

  #     - name: Upload ZAP report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: zap-security-report
  #         path: zap_output/zap_report.json

  #     - name: Cleanup
  #       if: always()
  #       run: |
  #         docker stop auth-service auth-db rabbitmq || true
  #         docker rm auth-service auth-db rabbitmq || true
  #         docker network rm test-net || true





