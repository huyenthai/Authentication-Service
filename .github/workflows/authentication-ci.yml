name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: huyenthai01/authentication-service
  PROJECT_PATH: src/Authentication\ Service/Authentication\ Service.csproj
  TEST_PATH: tests/AuthenticationService.IntegrationTests/AuthenticationService.IntegrationTests.csproj
  TAG_NAME: latest

permissions:
  security-events: write

jobs:

  build-and-test:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.7
        options: --privileged
    steps:
      - name: Checkout Authentication Service
        uses: actions/checkout@v3

      - name: Checkout Env-Dev
        uses: actions/checkout@v3
        with:
          repository: huyenthai/Env-Dev
          path: Env-Dev

      - name: Set up Docker Compose .env
        run: |
          echo "Jwt__Key=${{ secrets.JWT_KEY }}" >> Env-Dev/.env
          echo "ConnectionStrings__AuthDb=Server=auth-db;Database=${{ secrets.AUTH_DB_NAME }};User Id=${{ secrets.DB_USER }};Password=${{ secrets.DB_PASSWORD }};Encrypt=False;TrustServerCertificate=True;" >> Env-Dev/.env
          echo "ConnectionStrings__UserDb=Server=user-db;Database=${{ secrets.USER_DB_NAME }};User Id=${{ secrets.DB_USER }};Password=${{ secrets.DB_PASSWORD }};Encrypt=False;TrustServerCertificate=True;" >> Env-Dev/.env
          echo "RabbitMq__User=${{ secrets.RABBITMQ_USER }}" >> Env-Dev/.env
          echo "RabbitMq__Password=${{ secrets.RABBITMQ_PASSWORD }}" >> Env-Dev/.env

      - name: Start containers
        working-directory: Env-Dev
        run: docker-compose up -d --build

      - name: Wait for services to be healthy
        run: sleep 20

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release

      - name: Run Integration Tests
        run: dotnet test ${{ env.TEST_PATH }} --configuration Release --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Generate Coverage Report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coverage" \
            -reporttypes:"Cobertura"

      - name: Upload to Codacy
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          curl -Ls https://coverage.codacy.com/get.sh | bash
          /home/runner/.cache/codacy/coverage-reporter/*/codacy-coverage-reporter \
            report \
            --project-token $CODACY_PROJECT_TOKEN \
            --commit-uuid ${{ github.sha }} \
            --language CSharp \
            -r coverage/Cobertura.xml

  docker-image-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE="${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          LATEST="${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
          docker build -t "$IMAGE" -t "$LATEST" .
          docker push "$IMAGE"
          docker push "$LATEST"
